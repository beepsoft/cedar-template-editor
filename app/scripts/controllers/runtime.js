'use strict';

angularApp.controller('RuntimeController', function ($rootScope, $scope, FormService, $routeParams, $location) {

	// set Page Title variable when this controller is active
	$rootScope.pageTitle = 'Runtime Template';

	// Giving $scope access to window.location for checking active state
	$scope.$location = $location;

	// Using form service to load list of existing elements to embed into new element
  FormService.formList().then(function(response) {
    $scope.formList = response;
  });


	// Create empty form object
	// Create empty currentPage array
	// Default to page 1 on load (array index 0)
	// Create empty pages Array
	// Create empty instance object
  $scope.form = {},
  $scope.currentPage = [],
  $scope.pageIndex = 0,
  $scope.pagesArray = [],
  $scope.instance = {
  	//'@context': {},
  	//'@type': {}
  };


	// used for testing loading form list with cardinaltiy 
	$scope.formListMulti = {
  "f1": {
    "type": "array",
    "items": [
      {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "@id": "https://repo.metadatacenter.org/6d2936a5-7a09-4426-959f-4c0d02dea068",
        "title": "Awesome element name element schema",
        "description": "Awesome element name element schema autogenerated by the CEDAR Template Editor",
        "order": [],
        "minItems": 1,
        "maxItems": "N",
        "type": "object",
        "properties": {
          "@context": {
            "properties": {
              "value": {
                "enum": [
                  "https://schema.org/value"
                ]
              },
              "awesome_element_field_title": {
                "enum": [
                  "https://metadatacenter.org/schemas/awesome_element_field_title"
                ]
              }
            },
            "required": [
              "value",
              "awesome_element_field_title"
            ],
            "additionalProperties": false
          },
          "@type": {
            "oneOf": [
              {
                "type": "string",
                "format": "uri",
                "enum": []
              },
              {
                "type": "array",
                "minItems": 1,
                "items": {
                  "type": "string",
                  "format": "uri",
                  "enum": []
                },
                "uniqueItems": true
              }
            ]
          },
          "info": {
            "title": "Awesome Element Name",
            "description": "Awesome Element Description"
          },
          "awesome_element_field_title": {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "@id": "https://repo.metadatacenter.org/3341bec2-38e4-4bba-8ff4-1f7aa5f34bd5",
            "type": "object",
            "properties": {
              "@type": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "uri",
                    "enum": []
                  },
                  {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "string",
                      "format": "uri",
                      "enum": []
                    },
                    "uniqueItems": true
                  }
                ]
              },
              "info": {
                "title": "Awesome element field title",
                "description": "awesome element field description",
                "input_type": "textfield",
                "required_value": false,
                "created_at": 1442959635989
              },
              "value": {
                "type": "string"
              }
            },
            "required": [
              "value"
            ],
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "minItems": "2",
    "maxItems": "3"
  },
  "f2": {
    "minItems": "4",
    "maxItems": "6",
    "items": [
      {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "@id": "https://repo.metadatacenter.org/6d2936a5-7a09-4426-959f-4c0d02dea068",
        "title": "Awesome element name element schema",
        "description": "Awesome element name element schema autogenerated by the CEDAR Template Editor",
        "order": [],
        "minItems": 1,
        "maxItems": "N",
        "type": "object",
        "properties": {
          "@context": {
            "properties": {
              "value": {
                "enum": [
                  "https://schema.org/value"
                ]
              },
              "awesome_element_field_title": {
                "enum": [
                  "https://metadatacenter.org/schemas/awesome_element_field_title"
                ]
              },
              "super_sick_field_title": {
                "enum": [
                  "https://metadatacenter.org/schemas/super_sick_field_title"
                ]
              }
            },
            "required": [
              "value",
              "awesome_element_field_title",
              "super_sick_field_title"
            ],
            "additionalProperties": false
          },
          "@type": {
            "oneOf": [
              {
                "type": "string",
                "format": "uri",
                "enum": []
              },
              {
                "type": "array",
                "minItems": 1,
                "items": {
                  "type": "string",
                  "format": "uri",
                  "enum": []
                },
                "uniqueItems": true
              }
            ]
          },
          "info": {
            "title": "Awesome Element Name",
            "description": "Awesome Element Description"
          },
          "awesome_element_field_title": {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "@id": "https://repo.metadatacenter.org/3341bec2-38e4-4bba-8ff4-1f7aa5f34bd5",
            "type": "object",
            "properties": {
              "@type": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "uri",
                    "enum": []
                  },
                  {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "string",
                      "format": "uri",
                      "enum": []
                    },
                    "uniqueItems": true
                  }
                ]
              },
              "info": {
                "title": "Awesome element field title",
                "description": "awesome element field description",
                "input_type": "textfield",
                "required_value": false,
                "created_at": 1442959635989
              },
              "value": {
                "type": "string"
              }
            },
            "required": [
              "value"
            ],
            "additionalProperties": false
          },
          "super_sick_field_title": {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "@id": "https://repo.metadatacenter.org/e5015ea9-431a-4606-8c15-ff9c2ef5ebbf",
            "type": "object",
            "properties": {
              "@type": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "uri",
                    "enum": []
                  },
                  {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "string",
                      "format": "uri",
                      "enum": []
                    },
                    "uniqueItems": true
                  }
                ]
              },
              "info": {
                "title": "Super sick field title",
                "description": "Super sick description",
                "input_type": "textarea",
                "required_value": false,
                "created_at": 1442959686699
              },
              "value": {
                "type": "string"
              }
            },
            "required": [
              "value"
            ],
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  }
}

	$scope.clicker = function() {
	}

	// Get/read form with given id from $routeParams
	$scope.getForm = function() {
		FormService.form($routeParams.template_id).then(function(form) {
			// Assign returned form object from FormService to $scope.form
			$scope.form = form;
			// $scope.initializePagination kicks off paging with form.pages array
			$scope.initializePagination(form.pages);
		});
	};

	// Get/read submission with given submission_id from $routeParams
	$scope.getSubmission = function() {
		FormService.populatedTemplate($routeParams.id).then(function(response) {
			// FormService.populatedTemplate returns an existing instance, assign it to our local $scope.instance
			$scope.instance = response;
			//$scope.$broadcast('loadExistingModel', response);
			// Get and load the template document this instance will populate from (will be blank form template)
			FormService.form(response.template_id).then(function(form) {
				// Assign returned form object from FormService to $scope.form
				$scope.form = form;
				// $scope.initializePagination kicks off paging with form.pages array
				$scope.initializePagination(form.pages);
			});
		}).catch(function(err) {
			$scope.runtimeErrorMessages.push('Problem retrieving the populated template instance.');
		});
	};

	// Create new instance
	if (!angular.isUndefined($routeParams.template_id)) {
		$scope.getForm();
	}
	// Edit existing instance
	if (!angular.isUndefined($routeParams.id)) {
		// Loading empty form if given an ID in the $routeParams.id url path
		$scope.getSubmission();
	}

	// Inject pages array from FormService into $scope variable
	// and render the first page of fields/elements by default
	$scope.initializePagination = function(pages) {
		$scope.pagesArray = pages;
		$scope.currentPage = $scope.pagesArray[$scope.pageIndex];
	};

	// Load the previous page of the form
	$scope.previousPage = function() {
		$scope.pageIndex --;
		$scope.currentPage = $scope.pagesArray[$scope.pageIndex];
	};

	// Load the next page of the form
	$scope.nextPage = function() {
		$scope.pageIndex ++;
		$scope.currentPage = $scope.pagesArray[$scope.pageIndex];
	};

	// Load an arbitrary page number attached to the index of it via runtime.html template
	$scope.setCurrentPage = function(page) {
		$scope.pageIndex = page;
		$scope.currentPage = $scope.pagesArray[$scope.pageIndex];
	};

	// Stores the data (populated template) into the database
	$scope.savePopulatedTemplate = function() {
		$scope.runtimeErrorMessages = [];
		$scope.runtimeSuccessMessages = [];
		// Broadcast submitForm event to form-directive.js which will assign the form $scope.model to $scope.instance of this controller
		$scope.$broadcast('submitForm');
		// Create instance if there are no required field errors
		if (!$scope.emptyRequiredFields.length && $scope.instance['@id'] == undefined) {
			// '@id' and 'template_id' haven't been populated yet, create now
			$scope.instance['@id'] = $rootScope.idBasePath + $rootScope.generateGUID();
			$scope.instance['template_id'] = $routeParams.template_id;
			// Make create instance call
			FormService.savePopulatedTemplate($scope.instance).then(function(response) {
				$scope.runtimeSuccessMessages.push('The populated template has been saved.');
			}).catch(function(err) {
				$scope.runtimeErrorMessages.push('Problem saving the populated template.');
				console.log(err);
			});
		}
		// Update instance
		else if (!$scope.emptyRequiredFields.length) {
			FormService.updatePopulatedTemplate($scope.instance['@id'], $scope.instance).then(function(response) {
				$scope.runtimeSuccessMessages.push('The populated template has been updated.');
			}).catch(function(err) {
				$scope.runtimeErrorMessages.push('Problem updating the populated template.');
				console.log(err);
			});
		}
	}

	// Initialize array for required fields left empty that fail required empty check
	$scope.emptyRequiredFields = [];
	// Event listener waiting for emptyRequiredField $emit from field-directive.js
	$scope.$on('emptyRequiredField', function (event, args) {
		if (args[0] == 'add' && $scope.emptyRequiredFields.indexOf(args[1]) == -1) {
			$scope.emptyRequiredFields.push(args[1]);
		}
		if (args[0] == 'remove') {
			var index = $scope.emptyRequiredFields.indexOf(args[1]);
			if (index != -1) {
				$scope.emptyRequiredFields.splice(index,1);
			}
		}
	});
});
